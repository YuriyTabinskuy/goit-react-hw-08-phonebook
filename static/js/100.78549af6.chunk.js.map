{"version":3,"file":"static/js/100.78549af6.chunk.js","mappings":"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","sources":["components/Styled/BgWrapper.styled.jsx","components/Styled/Section.styled.jsx","helpers/validationSchema.js","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport LoginBgImage from 'img/login-bg-img.jpg';\nimport LoginBgImage2x from 'img/login-bg-img@2x.jpg';\nimport ContactsBgImage from 'img/contacts-bg-img.jpg';\nimport ContactsBgImage2x from 'img/contacts-bg-img@2x.jpg';\n\nexport const LoginBgWrapper = styled.div`\n  min-width: 320px;\n  height: 100%;\n  background: linear-gradient(\n      0deg,\n      rgba(0, 0, 0, 0.2) 0%,\n      rgba(0, 0, 0, 0.2) 100%\n    ),\n    url(${LoginBgImage});\n\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n\n  filter: blur(1.5px);\n\n  @media (min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background: linear-gradient(\n        0deg,\n        rgba(0, 0, 0, 0.2) 0%,\n        rgba(0, 0, 0, 0.2) 100%\n      ),\n      url(${LoginBgImage2x});\n    background-size: cover;\n    background-position: center;\n  }\n`;\n\nexport const ContactsBgWrapper = styled.div`\n  min-width: 320px;\n  height: 100%;\n  background: linear-gradient(\n      0deg,\n      rgba(0, 0, 0, 0.2) 0%,\n      rgba(0, 0, 0, 0.2) 100%\n    ),\n    url(${ContactsBgImage});\n\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: top right;\n\n  @media (min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background: linear-gradient(\n        0deg,\n        rgba(0, 0, 0, 0.2) 0%,\n        rgba(0, 0, 0, 0.2) 100%\n      ),\n      url(${ContactsBgImage2x});\n    background-size: cover;\n\n    background-position: top right;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  position: relative;\n  height: calc(100vh - 96px);\n`;\n","import * as yup from 'yup';\nimport 'yup-phone-lite';\n\nexport const contactsValidationSchema = yup.object({\n  name: yup.string().min(2).max(32).required('This field is required'),\n  number: yup\n    .string()\n    .phone(null, `Please enter a valid phone number`)\n    .required('This field is required'),\n});\n\n// Please enter a valid phone number in an international format. Example: +380 50-123-4567\n\nexport const registerValidationSchema = yup.object({\n  name: yup.string().min(2).max(32).required('This field is required'),\n  email: yup.string().email().required('This field is required'),\n  password: yup.string().min(7).max(32).required('This field is required'),\n});\n\nexport const loginValidationSchema = yup.object({\n  email: yup.string().email().required('This field is required'),\n  password: yup.string().min(7).max(32).required('This field is required'),\n});\n","import styled from 'styled-components';\nimport { Form as FormikForm, Field as FormikField } from 'formik';\nimport { colors, transition } from 'helpers/variables';\nimport { Link } from 'react-router-dom';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  row-gap: 52px;\n  align-items: center;\n`;\n\nexport const Title = styled.h1`\n  font-size: 25px;\n  font-weight: 500;\n  line-height: 1.22;\n  text-decoration: underline;\n  text-transform: uppercase;\n  margin-bottom: 30px;\n  text-align: center;\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n`;\n\nexport const Label = styled.label`\n  font-size: 17px;\n  font-weight: 200;\n  line-height: 1.22;\n`;\n\nexport const Field = styled(FormikField)`\n  width: 340px;\n  padding: 9px 20px;\n  border-radius: 10px;\n  border: 1px solid #000;\n  font-size: 16px;\n  background-color: transparent;\n\n  &:focus {\n    outline: 1.5px solid ${colors.mainAccentColor};\n  }\n\n  &::placeholder {\n    color: ${colors.placeholderColor};\n    font-weight: 200;\n    line-height: 1.22;\n  }\n`;\n\nexport const FormWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 64px 40px 44px;\n  background-color: ${colors.mainBgColor};\n  /* z-index: 999; */\n  border-radius: 10px;\n  background: #cfcfd1;\n  box-shadow: 0px 4px 11px 0px #000;\n`;\n\nexport const Button = styled.button`\n  padding: 6.5px 40px;\n  border: none;\n  border-radius: 10px;\n  background: ${colors.mainAccentColor};\n  box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);\n  color: #fff;\n  cursor: pointer;\n  font-size: 18px;\n  font-weight: 300;\n  line-height: 1.2;\n  transition: transform ${transition};\n\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n  }\n`;\n\nexport const AllInputsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  row-gap: 30px;\n`;\n\nexport const Text = styled.p`\n  font-size: 16px;\n  font-weight: 200;\n  line-height: 1.22;\n`;\nexport const LogInLink = styled(Link)`\n  color: ${colors.mainAccentColor};\n  font-family: Montserrat;\n  font-size: 16px;\n  font-weight: 200;\n  line-height: 1.22;\n  text-decoration: underline;\n`;\n\nexport const TextWrapper = styled.div`\n  display: flex;\n  column-gap: 12px;\n  margin-top: 40px;\n`;\n\nexport const StyledErrorMessage = styled.p`\n  position: absolute;\n  bottom: -24px;\n  left: 20px;\n  color: #b40101;\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1.22;\n`;\n","import { ErrorMessage, Formik } from 'formik';\nimport {\n  AllInputsWrapper,\n  Button,\n  Field,\n  Form,\n  FormWrapper,\n  InputWrapper,\n  Label,\n  LogInLink,\n  StyledErrorMessage,\n  Text,\n  TextWrapper,\n  Title,\n} from './RegisterForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { registerValidationSchema } from 'helpers/validationSchema';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <FormWrapper>\n      <Title>Sign up</Title>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={registerValidationSchema}\n        onSubmit={(values, actions) => {\n          console.log(values);\n          dispatch(register(values));\n\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <AllInputsWrapper>\n            <InputWrapper>\n              <Label>Name</Label>\n              <Field type=\"text\" name=\"name\" placeholder=\"Your name\" />\n              <ErrorMessage\n                name=\"name\"\n                render={message => (\n                  <StyledErrorMessage>{message}</StyledErrorMessage>\n                )}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <Label>Email</Label>\n              <Field type=\"email\" name=\"email\" placeholder=\"Your email\" />\n              <ErrorMessage\n                name=\"email\"\n                render={message => (\n                  <StyledErrorMessage>{message}</StyledErrorMessage>\n                )}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <Label>Password</Label>\n              <Field\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Your password\"\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={message => (\n                  <StyledErrorMessage>{message}</StyledErrorMessage>\n                )}\n              />\n            </InputWrapper>\n          </AllInputsWrapper>\n          <Button type=\"submit\">Sign Up</Button>\n        </Form>\n      </Formik>\n      <TextWrapper>\n        <Text>Already registered?</Text>\n        <LogInLink to=\"/login\">Log In</LogInLink>\n      </TextWrapper>\n    </FormWrapper>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Section } from 'components/Styled/Section.styled';\nimport { LoginBgWrapper } from 'components/Styled/BgWrapper.styled';\n\nexport default function Register() {\n  return (\n    <main>\n      <Section>\n        <LoginBgWrapper />\n\n        <RegisterForm />\n      </Section>\n    </main>\n  );\n}\n"],"names":["LoginBgWrapper","styled","_templateObject","_taggedTemplateLiteral","LoginBgImage","LoginBgImage2x","ContactsBgWrapper","_templateObject2","ContactsBgImage","ContactsBgImage2x","Section","contactsValidationSchema","yup","name","min","max","required","number","phone","registerValidationSchema","email","password","loginValidationSchema","Form","FormikForm","Title","InputWrapper","_templateObject3","Label","_templateObject4","Field","FormikField","_templateObject5","colors","FormWrapper","_templateObject6","Button","_templateObject7","transition","AllInputsWrapper","_templateObject8","Text","_templateObject9","LogInLink","Link","_templateObject10","TextWrapper","_templateObject11","StyledErrorMessage","_templateObject12","RegisterForm","dispatch","useDispatch","_jsxs","children","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","console","log","register","resetForm","type","placeholder","ErrorMessage","render","message","to","Register"],"sourceRoot":""}